%=============================================================%
% Produces & filters disparity map basing on two gray-scale 
% pictures taken with stereo pair
%
% @param J1, J2 : gray-scale pictures
% @param disparityParams : structure of parameters used to
%        get and filter disparity map
%=============================================================%
function disparityMap = getDisparityMap(J1, J2, disparityParams, disparityFilterParams)
    
    % Get disparity map
    if strcmp(disparityParams.type, 'SGM')
        disparityMap = disparitySGM( ...
            J1, J2,                                             ...
            'DisparityRange'     , disparityParams.dispRange,   ...
            'UniquenessThreshold', disparityParams.uniqnessThr  ...
        );
    else
        disparityMap = disparityBM( ...
            J1, J2,                                              ...
            'DisparityRange'      , disparityParams.dispRange,   ...
            'BlockSize'           , disparityParams.blockSize,   ...
            'ContrastThreshold'   , disparityParams.contrastThr, ...
            'UniquenessThreshold' , disparityParams.uniqnessThr, ...
            'DistanceThreshold'   , disparityParams.distanceThr, ...
            'TextureThreshold'    , disparityParams.textureThr   ...
        );
    end

    % Filter disparity map
    if strcmp(disparityFilterParams.filterType, 'median')
        % Median filter
        disparityMap = medfilt2(disparityMap,  ...
            disparityFilterParams.neighborhood ...
        );
    elseif strcmp(disparityFilterParams.filterType, 'gaussian')
        % Gaussian filter
        disparityMap = imgaussfilt(disparityMap,                     ...
             disparityFilterParams.sigma,                            ...
             'FilterSize'      , disparityFilterParams.filterSize,   ...
             'Padding'         , disparityFilterParams.padding,      ...
             'FilterDomain'    , disparityFilterParams.filterDomain  ...
         );
    end
end

